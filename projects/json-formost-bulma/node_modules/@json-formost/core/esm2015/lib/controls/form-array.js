import { FormArray as NgFormArray } from '@angular/forms';
import { populateInterfaceProperties } from '../util';
export class FormArray extends NgFormArray {
    constructor(controls, validatorOrOpts, asyncValidator, fbs) {
        super(controls, validatorOrOpts, asyncValidator);
        this.controls = controls;
        this.fbs = fbs;
        this.itemTypes = [];
        this.additionalItems = false;
    }
    populate(source) {
        populateInterfaceProperties(this, source, ['uniqueItems', 'contains', 'additionalItems', 'minItems', 'maxItems']);
    }
    getControlType() {
        return 'array';
    }
    setValue(value, options = {}) {
        if (value && value.length > 0) {
            if (!this.fbs)
                throw 'Must supply FormBuilderService instance.';
            value.forEach(val => {
                const schema = this.itemTypes.length == 1
                    ? this.itemTypes[0]
                    : this.itemTypes.find(sch => sch.type == typeof val); // ToDo: better type matching
                // console.info("schema+val", schema, val);
                let ctl = this.fbs.getFormostAbstractControl(schema);
                this.push(ctl);
            });
        }
        super.setValue(value, options);
        // this._checkAllValuesPresent(value);
        // value.forEach((newValue: any, index: number) => {
        //   this._throwIfControlMissing(index);
        //   this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});
        // });
        // this.updateValueAndValidity(options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1hcnJheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2pzb24tZm9ybW9zdC1jb3JlL3NyYy9saWIvY29udHJvbHMvZm9ybS1hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxJQUFJLFdBQVcsRUFBMEYsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsSixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFJdEQsTUFBTSxPQUFPLFNBQTJDLFNBQVEsV0FBVztJQUd2RSxZQUNXLFFBQTJCLEVBQ2xDLGVBQXNFLEVBQ3RFLGNBQXNELEVBQzlDLEdBQTRCO1FBRXBDLEtBQUssQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBTDFDLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRzFCLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBWXhDLGNBQVMsR0FBeUIsRUFBRSxDQUFDO1FBR3JDLG9CQUFlLEdBQXFDLEtBQUssQ0FBQztJQVoxRCxDQUFDO0lBZ0JELFFBQVEsQ0FBQyxNQUFjO1FBQ25CLDJCQUEyQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3RILENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFZLEVBQUUsVUFBdUQsRUFBRTtRQUM1RSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQUUsTUFBTSwwQ0FBMEMsQ0FBQztZQUNoRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDO29CQUNyQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtnQkFDdkYsMkNBQTJDO2dCQUMzQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixzQ0FBc0M7UUFDdEMsb0RBQW9EO1FBQ3BELHdDQUF3QztRQUN4Qyx1RkFBdUY7UUFDdkYsTUFBTTtRQUNOLHdDQUF3QztJQUM1QyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQXJyYXkgYXMgTmdGb3JtQXJyYXksIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yRm4sIEFic3RyYWN0Q29udHJvbE9wdGlvbnMsIEFzeW5jVmFsaWRhdG9yLCBBc3luY1ZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybW9zdEFic3RyYWN0Q29udHJvbCB9IGZyb20gJy4uL2Zvcm1vc3QtYWJzdHJhY3QtY29udHJvbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9wdWxhdGVJbnRlcmZhY2VQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBGb3Jtb3N0SnNvblNjaGVtYTcgfSBmcm9tICcuLi9mb3Jtb3N0LWpzb24tc2NoZW1hLTcuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNjaGVtYUNvbnZlcnRlclNlcnZpY2UgfSBmcm9tICcuLi9mb3Jtb3N0LXNjaGVtYS1jb252ZXJ0ZXIuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBGb3JtQXJyYXk8VCA9IGFueSwgRSBleHRlbmRzIG9iamVjdCA9IGFueT4gZXh0ZW5kcyBOZ0Zvcm1BcnJheSBpbXBsZW1lbnRzIEZvcm1vc3RBYnN0cmFjdENvbnRyb2wge1xuICAgIHJlYWRvbmx5IHZhbHVlOiBUW107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGNvbnRyb2xzOiBBYnN0cmFjdENvbnRyb2xbXSxcbiAgICAgICAgdmFsaWRhdG9yT3JPcHRzPzogVmFsaWRhdG9yRm4gfCBWYWxpZGF0b3JGbltdIHwgQWJzdHJhY3RDb250cm9sT3B0aW9ucyxcbiAgICAgICAgYXN5bmNWYWxpZGF0b3I/OiBBc3luY1ZhbGlkYXRvckZuIHwgQXN5bmNWYWxpZGF0b3JGbltdLFxuICAgICAgICBwcml2YXRlIGZicz86IFNjaGVtYUNvbnZlcnRlclNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoY29udHJvbHMsIHZhbGlkYXRvck9yT3B0cywgYXN5bmNWYWxpZGF0b3IpO1xuICAgIH1cblxuICAgIC8vIEZyb20gSW50ZXJmYWNlXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJlZmlkOiBzdHJpbmc7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgaGVscD86IHN0cmluZztcblxuICAgIGl0ZW1UeXBlczogRm9ybW9zdEpzb25TY2hlbWE3W10gPSBbXTtcbiAgICB1bmlxdWVJdGVtcz86IGJvb2xlYW47XG4gICAgY29udGFpbnM/OiBGb3Jtb3N0QWJzdHJhY3RDb250cm9sO1xuICAgIGFkZGl0aW9uYWxJdGVtczogRm9ybW9zdEFic3RyYWN0Q29udHJvbCB8IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBtaW5JdGVtcz86IG51bWJlcjtcbiAgICBtYXhJdGVtcz86IG51bWJlcjtcblxuICAgIHBvcHVsYXRlKHNvdXJjZTogb2JqZWN0KSB7XG4gICAgICAgIHBvcHVsYXRlSW50ZXJmYWNlUHJvcGVydGllcyh0aGlzLCBzb3VyY2UsIFsndW5pcXVlSXRlbXMnLCAnY29udGFpbnMnLCAnYWRkaXRpb25hbEl0ZW1zJywgJ21pbkl0ZW1zJywgJ21heEl0ZW1zJ10pO1xuICAgIH1cblxuICAgIGdldENvbnRyb2xUeXBlKCk6IFwiY29udHJvbFwiIHwgXCJncm91cFwiIHwgXCJhcnJheVwiIHtcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IGFueVtdLCBvcHRpb25zOiB7IG9ubHlTZWxmPzogYm9vbGVhbiwgZW1pdEV2ZW50PzogYm9vbGVhbiB9ID0ge30pOiB2b2lkIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5mYnMpIHRocm93ICdNdXN0IHN1cHBseSBGb3JtQnVpbGRlclNlcnZpY2UgaW5zdGFuY2UuJztcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2godmFsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLml0ZW1UeXBlcy5sZW5ndGggPT0gMVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuaXRlbVR5cGVzWzBdXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5pdGVtVHlwZXMuZmluZChzY2ggPT4gc2NoLnR5cGUgPT0gdHlwZW9mIHZhbCk7IC8vIFRvRG86IGJldHRlciB0eXBlIG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKFwic2NoZW1hK3ZhbFwiLCBzY2hlbWEsIHZhbCk7XG4gICAgICAgICAgICAgICAgbGV0IGN0bCA9IHRoaXMuZmJzLmdldEZvcm1vc3RBYnN0cmFjdENvbnRyb2woc2NoZW1hKTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goY3RsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuc2V0VmFsdWUodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICAvLyB0aGlzLl9jaGVja0FsbFZhbHVlc1ByZXNlbnQodmFsdWUpO1xuICAgICAgICAvLyB2YWx1ZS5mb3JFYWNoKChuZXdWYWx1ZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIC8vICAgdGhpcy5fdGhyb3dJZkNvbnRyb2xNaXNzaW5nKGluZGV4KTtcbiAgICAgICAgLy8gICB0aGlzLmF0KGluZGV4KS5zZXRWYWx1ZShuZXdWYWx1ZSwge29ubHlTZWxmOiB0cnVlLCBlbWl0RXZlbnQ6IG9wdGlvbnMuZW1pdEV2ZW50fSk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkob3B0aW9ucyk7XG4gICAgfVxufSAgIl19