import { FormControl as NgFormControl, Validators } from '@angular/forms';
import { populateInterfaceProperties } from '../util';
export class FormControl extends NgFormControl {
    constructor(source, formState) {
        super(formState, null, null);
        // type: string
        this.minLength = null;
        this.maxLength = null;
        this.pattern = null;
        this.contentMediaType = null;
        // type: number
        this.multipleOf = null;
        this.minimum = null;
        this.exclusiveMinimum = null;
        this.maximum = null;
        this.exclusiveMaximum = null;
        populateInterfaceProperties(this, source, ['type', 'required', 'enum', 'minLength', 'maxLength', 'pattern', 'format', 'contentEncoding', 'contentMediaType', 'multipleOf', 'minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum']);
        this.setValidators(this.getValidators());
    }
    get uiType() {
        if (this.type == 'string' && this.enum) {
            return 'dropdown';
        }
        if (this.type == 'boolean') {
            return 'checkbox';
        }
        // if (this.type == 'string' && (this.minLength > 99 || this.maxLength > 99)) { return 'bigtext'; }
        if (this.type == 'string' && this.contentMediaType == 'text/html') {
            return 'richtext';
        }
        if (this.type == 'string' && this.contentMediaType == 'text/markdown') {
            return 'markdown';
        }
        return 'input';
    }
    ;
    get inputType() {
        if (this.uiType == 'input') {
            if (this.type == 'number' || this.type == 'integer') {
                return 'number';
            }
            if (this.type == 'string' && this.format == 'date-time') {
                return 'datetime-local';
            }
            if (this.type == 'string' && this.format == 'date') {
                return 'date';
            }
            if (this.type == 'string' && this.format == 'time') {
                return 'number';
            }
            if (this.type == 'string' && this.format == 'email') {
                return 'email';
            }
            if (this.type == 'string' && this.format == 'uri') {
                return 'url';
            }
            if (this.type == 'string') {
                return 'text';
            }
        }
        return null;
    }
    populate(source) {
        populateInterfaceProperties(this, source, ['type', 'required', 'enum', 'minLength', 'maxLength', 'pattern', 'format', 'contentEncoding', 'contentMediaType', 'multipleOf', 'minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum']);
    }
    getControlType() {
        return 'control';
    }
    getValidators() {
        const validators = [];
        if (this.required)
            validators.push(Validators.required);
        if (this.type == 'string') {
            if (this.minLength !== null)
                validators.push(Validators.minLength(this.minLength));
            if (this.maxLength !== null)
                validators.push(Validators.minLength(this.maxLength));
            if (this.pattern !== null)
                validators.push(Validators.pattern(this.pattern));
            if (this.format == "email")
                validators.push(Validators.email);
        }
        if (this.type == 'number') {
            if (this.minimum !== null)
                validators.push(Validators.min(this.minimum));
            if (this.maximum !== null)
                validators.push(Validators.max(this.maximum));
        }
        console.info(name, validators);
        return validators;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvanNvbi1mb3Jtb3N0LWNvcmUvc3JjL2xpYi9jb250cm9scy9mb3JtLWNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsSUFBSSxhQUFhLEVBQUUsVUFBVSxFQUF5RCxNQUFNLGdCQUFnQixDQUFDO0FBRWpJLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV0RCxNQUFNLE9BQU8sV0FBNkMsU0FBUSxhQUFhO0lBRzNFLFlBQVksTUFBTSxFQUFFLFNBQWU7UUFDL0IsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUF1Q2pDLGVBQWU7UUFDZixjQUFTLEdBQVksSUFBSSxDQUFDO1FBQzFCLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFDMUIsWUFBTyxHQUFZLElBQUksQ0FBQztRQU14QixxQkFBZ0IsR0FBWSxJQUFJLENBQUM7UUFFakMsZUFBZTtRQUNmLGVBQVUsR0FBWSxJQUFJLENBQUM7UUFDM0IsWUFBTyxHQUFZLElBQUksQ0FBQztRQUN4QixxQkFBZ0IsR0FBWSxJQUFJLENBQUM7UUFDakMsWUFBTyxHQUFZLElBQUksQ0FBQztRQUN4QixxQkFBZ0IsR0FBWSxJQUFJLENBQUM7UUF0RDdCLDJCQUEyQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQzFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7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QUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJO2dCQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU87Z0JBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUN2QixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSTtnQkFDckIsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJO2dCQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUvQixPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQ29udHJvbCBhcyBOZ0Zvcm1Db250cm9sLCBWYWxpZGF0b3JzLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sT3B0aW9ucywgQXN5bmNWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1vc3RBYnN0cmFjdENvbnRyb2wgfSBmcm9tICcuLi9mb3Jtb3N0LWFic3RyYWN0LWNvbnRyb2wuaW50ZXJmYWNlJztcbmltcG9ydCB7IHBvcHVsYXRlSW50ZXJmYWNlUHJvcGVydGllcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRyb2w8VCA9IGFueSwgRSBleHRlbmRzIG9iamVjdCA9IGFueT4gZXh0ZW5kcyBOZ0Zvcm1Db250cm9sIGltcGxlbWVudHMgRm9ybW9zdEFic3RyYWN0Q29udHJvbCB7XG4gICAgcmVhZG9ubHkgdmFsdWU6IFQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIGZvcm1TdGF0ZT86IGFueSkge1xuICAgICAgICBzdXBlcihmb3JtU3RhdGUsIG51bGwsIG51bGwpO1xuICAgICAgICBwb3B1bGF0ZUludGVyZmFjZVByb3BlcnRpZXModGhpcywgc291cmNlLCBbJ3R5cGUnLCAncmVxdWlyZWQnLCAnZW51bScsICdtaW5MZW5ndGgnLCAnbWF4TGVuZ3RoJywgJ3BhdHRlcm4nLCAnZm9ybWF0JywgJ2NvbnRlbnRFbmNvZGluZycsICdjb250ZW50TWVkaWFUeXBlJywgJ211bHRpcGxlT2YnLCAnbWluaW11bScsICdleGNsdXNpdmVNaW5pbXVtJywgJ21heGltdW0nLCAnZXhjbHVzaXZlTWF4aW11bSddKTtcbiAgICAgICAgdGhpcy5zZXRWYWxpZGF0b3JzKHRoaXMuZ2V0VmFsaWRhdG9ycygpKTtcbiAgICB9XG5cbiAgICAvLyBmcm9tIGludGVyZmFjZVxuICAgIG5hbWU6IHN0cmluZztcbiAgICByZWZpZDogc3RyaW5nO1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGhlbHA/OiBzdHJpbmc7XG5cbiAgICAvLyBGb3JtIENvbnRyb2wgcHJvcGVydGllc1xuXG4gICAgdHlwZTogJ3N0cmluZycgfCAnYm9vbGVhbicgfCAnbnVtYmVyJyB8ICdpbnRlZ2VyJyB8IG51bGw7XG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICAgIGdldCB1aVR5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnc3RyaW5nJyAmJiB0aGlzLmVudW0pIHsgcmV0dXJuICdkcm9wZG93bic7IH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnYm9vbGVhbicpIHsgcmV0dXJuICdjaGVja2JveCc7IH1cbiAgICAgICAgLy8gaWYgKHRoaXMudHlwZSA9PSAnc3RyaW5nJyAmJiAodGhpcy5taW5MZW5ndGggPiA5OSB8fCB0aGlzLm1heExlbmd0aCA+IDk5KSkgeyByZXR1cm4gJ2JpZ3RleHQnOyB9XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5jb250ZW50TWVkaWFUeXBlID09ICd0ZXh0L2h0bWwnKSB7IHJldHVybiAncmljaHRleHQnOyB9XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5jb250ZW50TWVkaWFUeXBlID09ICd0ZXh0L21hcmtkb3duJykgeyByZXR1cm4gJ21hcmtkb3duJzsgfVxuICAgICAgICByZXR1cm4gJ2lucHV0JztcbiAgICB9O1xuICAgIGdldCBpbnB1dFR5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudWlUeXBlID09ICdpbnB1dCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ251bWJlcicgfHwgdGhpcy50eXBlID09ICdpbnRlZ2VyJykgeyByZXR1cm4gJ251bWJlcic7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5mb3JtYXQgPT0gJ2RhdGUtdGltZScpIHsgcmV0dXJuICdkYXRldGltZS1sb2NhbCc7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5mb3JtYXQgPT0gJ2RhdGUnKSB7IHJldHVybiAnZGF0ZSc7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5mb3JtYXQgPT0gJ3RpbWUnKSB7IHJldHVybiAnbnVtYmVyJzsgfVxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnc3RyaW5nJyAmJiB0aGlzLmZvcm1hdCA9PSAnZW1haWwnKSB7IHJldHVybiAnZW1haWwnOyB9XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09ICdzdHJpbmcnICYmIHRoaXMuZm9ybWF0ID09ICd1cmknKSB7IHJldHVybiAndXJsJzsgfVxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnc3RyaW5nJykgeyByZXR1cm4gJ3RleHQnOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZW51bT86IGFueVtdO1xuXG4gICAgLy8gdHlwZTogc3RyaW5nXG4gICAgbWluTGVuZ3RoPzogbnVtYmVyID0gbnVsbDtcbiAgICBtYXhMZW5ndGg/OiBudW1iZXIgPSBudWxsO1xuICAgIHBhdHRlcm4/OiBzdHJpbmcgPSBudWxsO1xuICAgIGZvcm1hdD86ICdkYXRlLXRpbWUnIHwgJ3RpbWUnIHwgJ2RhdGUnIHwgJ2VtYWlsJyB8ICdpZG4tZW1haWwnIHxcbiAgICAgICAgJ2hvc3RuYW1lJyB8ICdpZG4taG9zdG5hbWUnIHwgJ2lwdjQnIHwgJ2lwdjYnIHwgJ3VyaScgfCAndXJpLXJlZmVyZW5jZScgfFxuICAgICAgICAnaXJpJyB8ICdpcmktcmVmZXJlbmNlJyB8ICd1cmktdGVtcGxhdGUnIHwgJ2pzb24tcG9pbnRlcicgfCAncmVsYXRpdmUtanNvbi1wb2ludGVyJyB8XG4gICAgICAgICdyZWdleCc7XG4gICAgY29udGVudEVuY29kaW5nPzogJzdiaXQnIHwgJzhiaXQnIHwgJ2JpbmFyeScgfCAncXVvdGVkLXByaW50YWJsZScgfCAnYmFzZTY0JztcbiAgICBjb250ZW50TWVkaWFUeXBlPzogc3RyaW5nID0gbnVsbDtcblxuICAgIC8vIHR5cGU6IG51bWJlclxuICAgIG11bHRpcGxlT2Y/OiBudW1iZXIgPSBudWxsO1xuICAgIG1pbmltdW0/OiBudW1iZXIgPSBudWxsO1xuICAgIGV4Y2x1c2l2ZU1pbmltdW0/OiBudW1iZXIgPSBudWxsO1xuICAgIG1heGltdW0/OiBudW1iZXIgPSBudWxsO1xuICAgIGV4Y2x1c2l2ZU1heGltdW0/OiBudW1iZXIgPSBudWxsO1xuXG4gICAgcG9wdWxhdGUoc291cmNlOiBvYmplY3QpIHtcbiAgICAgICAgcG9wdWxhdGVJbnRlcmZhY2VQcm9wZXJ0aWVzKHRoaXMsIHNvdXJjZSwgWyd0eXBlJywgJ3JlcXVpcmVkJywgJ2VudW0nLCAnbWluTGVuZ3RoJywgJ21heExlbmd0aCcsICdwYXR0ZXJuJywgJ2Zvcm1hdCcsICdjb250ZW50RW5jb2RpbmcnLCAnY29udGVudE1lZGlhVHlwZScsICdtdWx0aXBsZU9mJywgJ21pbmltdW0nLCAnZXhjbHVzaXZlTWluaW11bScsICdtYXhpbXVtJywgJ2V4Y2x1c2l2ZU1heGltdW0nXSk7XG4gICAgfVxuXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogJ2NvbnRyb2wnIHwgJ2dyb3VwJyB8ICdhcnJheScge1xuICAgICAgICByZXR1cm4gJ2NvbnRyb2wnO1xuICAgIH1cblxuICAgIGdldFZhbGlkYXRvcnMoKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvcnMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpXG4gICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHRoaXMubWluTGVuZ3RoICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcnMucHVzaChWYWxpZGF0b3JzLm1pbkxlbmd0aCh0aGlzLm1pbkxlbmd0aCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWF4TGVuZ3RoICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcnMucHVzaChWYWxpZGF0b3JzLm1pbkxlbmd0aCh0aGlzLm1heExlbmd0aCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGF0dGVybiAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5wYXR0ZXJuKHRoaXMucGF0dGVybikpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09IFwiZW1haWxcIilcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5lbWFpbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50eXBlID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5taW5pbXVtICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcnMucHVzaChWYWxpZGF0b3JzLm1pbih0aGlzLm1pbmltdW0pKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heGltdW0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9ycy5wdXNoKFZhbGlkYXRvcnMubWF4KHRoaXMubWF4aW11bSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5pbmZvKG5hbWUsIHZhbGlkYXRvcnMpO1xuXG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JzO1xuICAgIH1cbn0gICJdfQ==