import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { FormGroup } from './controls/form-group';
import { FormArray } from './controls/form-array';
import { FormControl } from './controls/form-control';
import * as i0 from "@angular/core";
export class SchemaConverterService {
    constructor() { }
    getFormostForm(schema) {
        let formItems = this.getFormItems(schema, "#");
        if (formItems instanceof FormGroup)
            return formItems;
        else {
            return new FormGroup({ formost: formItems });
        }
    }
    getFormostForm$(schema) {
        return of(this.getFormostForm(schema));
    }
    getFormostAbstractControl(schema, refId = "#") {
        let formItems = this.getFormItems(schema, refId);
        return formItems;
    }
    getFormostAbstractControl$(schema, refId = "#") {
        return of(this.getFormostAbstractControl(schema, refId));
    }
    getFormItems(schema, refId = "#") {
        const schemaObj = typeof schema === 'string' ? JSON.parse(schema) : schema;
        if (!schemaObj) {
            console.warn('NO-OBJECT', schemaObj);
            return {};
        }
        if (!schemaObj.type) {
            console.warn('NO-TYPE', schemaObj);
            return {};
        }
        let formItems;
        switch (schemaObj.type) {
            case 'null':
                return null;
            case 'object':
                formItems = this.getFormGroup(schemaObj, refId);
                break;
            case 'array':
                formItems = this.getFormArray(schemaObj, refId);
                break;
            default:
                formItems = this.getFormControl(schemaObj, refId);
                break;
        }
        return formItems;
    }
    getFormControl(obj, refId) {
        const formCtl = new FormControl(obj);
        // formCtl.populate(obj);
        if (refId) {
            formCtl.refid = refId;
        }
        return formCtl;
    }
    getFormGroup(obj, refId) {
        const reqArr = obj.required || [];
        const item = new FormGroup({});
        item.populate(obj);
        if (refId) {
            item.refid = refId;
        }
        for (const prop in obj.properties) {
            if (obj.properties.hasOwnProperty(prop)) {
                const unknownField = obj.properties[prop];
                unknownField.name = prop;
                if (reqArr.indexOf(prop) > -1) {
                    unknownField.required = true;
                }
                const knownField = this.getFormItems(unknownField, `${refId}/fields/${prop}`);
                //item.fields.push(knownField);
                item.addControl(prop, knownField);
            }
        }
        return item;
    }
    getFormArray(obj, refId) {
        const item = new FormArray([], undefined, undefined, this);
        item.populate(obj);
        if (refId) {
            item.refid = refId;
        }
        const allowedTypesArray = Array.isArray(obj.items)
            ? obj.items
            : [obj.items];
        // let i = 0;
        // for (const allowedType of allowedTypesArray) {
        //     // ++i;
        //     // allowedType.name = allowedType.name || `${obj.name ? obj.name + '-' : null}type-${i}`;
        //     // item.itemTypes.push(this.getFormItems(allowedType, `${refId}/itemTypes/${allowedType.name}`) as FormField);
        //     item.itemTypes.push(this.getFormItems(allowedType, `${refId}/itemTypes/[${i++}]`) as FormControl);
        // }
        item.itemTypes = allowedTypesArray;
        return item;
    }
}
SchemaConverterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SchemaConverterService_Factory() { return new SchemaConverterService(); }, token: SchemaConverterService, providedIn: "root" });
SchemaConverterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SchemaConverterService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,