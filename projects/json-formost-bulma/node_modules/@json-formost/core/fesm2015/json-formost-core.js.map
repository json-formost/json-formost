{"version":3,"file":"json-formost-core.js","sources":["../../../projects/json-formost-core/src/lib/util.ts","../../../projects/json-formost-core/src/lib/controls/form-group.ts","../../../projects/json-formost-core/src/lib/controls/form-array.ts","../../../projects/json-formost-core/src/lib/controls/form-control.ts","../../../projects/json-formost-core/src/lib/formost-schema-converter.service.ts","../../../projects/json-formost-core/src/lib/formost-json-schema-7.interface.ts","../../../projects/json-formost-core/src/public-api.ts","../../../projects/json-formost-core/src/json-formost-core.ts"],"sourcesContent":["import { KeyValue } from '@angular/common';\n\nfunction populateInterfaceProperties(target: object, source: object, properties: string[]) {\n    const allProps = ['name', 'refid', 'title', 'description', 'help', ...properties];\n    for (const prop of allProps) {\n        if (source.hasOwnProperty(prop)) {\n            target[prop] = source[prop];\n        }\n    }\n}\n\nconst keyValueSorters = {\n    // Preserve original property order\n    originalOrder: (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\n        return 0;\n    },\n\n    // Order by ascending property value\n    valueAscOrder: (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\n        return a.value.localeCompare(b.value);\n    },\n\n    // Order by descending property key\n    keyDescOrder: (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\n        return a.key > b.key ? -1 : (b.key > a.key ? 1 : 0);\n    }\n};\n\nexport { populateInterfaceProperties, keyValueSorters };","import { FormGroup as NgFormGroup, AbstractControl } from '@angular/forms';\nimport { FormostAbstractControl } from '../formost-abstract-control.interface';\nimport { populateInterfaceProperties } from '../util';\n\nexport class FormGroup<T extends object = any> extends NgFormGroup implements FormostAbstractControl {\n    readonly value: T;\n\n    constructor(\n        public controls: { [key: string]: AbstractControl },\n    ) {\n        //super(controls, validatorOrOpts, asyncValidator);\n        super(controls);\n    }\n\n    // from interface\n    name: string;\n    refid: string;\n    title?: string;\n    description?: string;\n    help?: string;\n\n    populate(source: object) {\n        populateInterfaceProperties(this, source, []);\n    }\n\n    getControlType(): \"control\" | \"group\" | \"array\" {\n        return 'group';\n    }\n}","import { FormArray as NgFormArray, AbstractControl, ValidatorFn, AbstractControlOptions, AsyncValidator, AsyncValidatorFn } from '@angular/forms';\nimport { FormostAbstractControl } from '../formost-abstract-control.interface';\nimport { populateInterfaceProperties } from '../util';\nimport { FormostJsonSchema7 } from '../formost-json-schema-7.interface';\nimport { SchemaConverterService } from '../formost-schema-converter.service';\n\nexport class FormArray<T = any, E extends object = any> extends NgFormArray implements FormostAbstractControl {\n    readonly value: T[];\n\n    constructor(\n        public controls: AbstractControl[],\n        validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n        asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[],\n        private fbs?: SchemaConverterService\n    ) {\n        super(controls, validatorOrOpts, asyncValidator);\n    }\n\n    // From Interface\n    name: string;\n    refid: string;\n    title?: string;\n    description?: string;\n    help?: string;\n\n    itemTypes: FormostJsonSchema7[] = [];\n    uniqueItems?: boolean;\n    contains?: FormostAbstractControl;\n    additionalItems: FormostAbstractControl | boolean = false;\n    minItems?: number;\n    maxItems?: number;\n\n    populate(source: object) {\n        populateInterfaceProperties(this, source, ['uniqueItems', 'contains', 'additionalItems', 'minItems', 'maxItems']);\n    }\n\n    getControlType(): \"control\" | \"group\" | \"array\" {\n        return 'array';\n    }\n\n    setValue(value: any[], options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\n        if (value && value.length > 0) {\n            if (!this.fbs) throw 'Must supply FormBuilderService instance.';\n            value.forEach(val => {\n                const schema = this.itemTypes.length == 1\n                    ? this.itemTypes[0]\n                    : this.itemTypes.find(sch => sch.type == typeof val); // ToDo: better type matching\n                // console.info(\"schema+val\", schema, val);\n                let ctl = this.fbs.getFormostAbstractControl(schema);\n                this.push(ctl);\n            });\n        }\n\n        super.setValue(value, options);\n        // this._checkAllValuesPresent(value);\n        // value.forEach((newValue: any, index: number) => {\n        //   this._throwIfControlMissing(index);\n        //   this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n        // });\n        // this.updateValueAndValidity(options);\n    }\n}  ","import { FormControl as NgFormControl, Validators, ValidatorFn, AbstractControlOptions, AsyncValidatorFn } from '@angular/forms';\nimport { FormostAbstractControl } from '../formost-abstract-control.interface';\nimport { populateInterfaceProperties } from '../util';\n\nexport class FormControl<T = any, E extends object = any> extends NgFormControl implements FormostAbstractControl {\n    readonly value: T;\n\n    constructor(source, formState?: any) {\n        super(formState, null, null);\n        populateInterfaceProperties(this, source, ['type', 'required', 'enum', 'minLength', 'maxLength', 'pattern', 'format', 'contentEncoding', 'contentMediaType', 'multipleOf', 'minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum']);\n        this.setValidators(this.getValidators());\n    }\n\n    // from interface\n    name: string;\n    refid: string;\n    title?: string;\n    description?: string;\n    help?: string;\n\n    // Form Control properties\n\n    type: 'string' | 'boolean' | 'number' | 'integer' | null;\n    required?: boolean;\n    get uiType(): string {\n        if (this.type == 'string' && this.enum) { return 'dropdown'; }\n        if (this.type == 'boolean') { return 'checkbox'; }\n        // if (this.type == 'string' && (this.minLength > 99 || this.maxLength > 99)) { return 'bigtext'; }\n        if (this.type == 'string' && this.contentMediaType == 'text/html') { return 'richtext'; }\n        if (this.type == 'string' && this.contentMediaType == 'text/markdown') { return 'markdown'; }\n        return 'input';\n    };\n    get inputType(): string {\n        if (this.uiType == 'input') {\n            if (this.type == 'number' || this.type == 'integer') { return 'number'; }\n            if (this.type == 'string' && this.format == 'date-time') { return 'datetime-local'; }\n            if (this.type == 'string' && this.format == 'date') { return 'date'; }\n            if (this.type == 'string' && this.format == 'time') { return 'number'; }\n            if (this.type == 'string' && this.format == 'email') { return 'email'; }\n            if (this.type == 'string' && this.format == 'uri') { return 'url'; }\n            if (this.type == 'string') { return 'text'; }\n        }\n        return null;\n    }\n\n    enum?: any[];\n\n    // type: string\n    minLength?: number = null;\n    maxLength?: number = null;\n    pattern?: string = null;\n    format?: 'date-time' | 'time' | 'date' | 'email' | 'idn-email' |\n        'hostname' | 'idn-hostname' | 'ipv4' | 'ipv6' | 'uri' | 'uri-reference' |\n        'iri' | 'iri-reference' | 'uri-template' | 'json-pointer' | 'relative-json-pointer' |\n        'regex';\n    contentEncoding?: '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64';\n    contentMediaType?: string = null;\n\n    // type: number\n    multipleOf?: number = null;\n    minimum?: number = null;\n    exclusiveMinimum?: number = null;\n    maximum?: number = null;\n    exclusiveMaximum?: number = null;\n\n    populate(source: object) {\n        populateInterfaceProperties(this, source, ['type', 'required', 'enum', 'minLength', 'maxLength', 'pattern', 'format', 'contentEncoding', 'contentMediaType', 'multipleOf', 'minimum', 'exclusiveMinimum', 'maximum', 'exclusiveMaximum']);\n    }\n\n    getControlType(): 'control' | 'group' | 'array' {\n        return 'control';\n    }\n\n    getValidators() {\n        const validators = [];\n        if (this.required)\n            validators.push(Validators.required);\n\n        if (this.type == 'string') {\n            if (this.minLength !== null)\n                validators.push(Validators.minLength(this.minLength));\n            if (this.maxLength !== null)\n                validators.push(Validators.minLength(this.maxLength));\n            if (this.pattern !== null)\n                validators.push(Validators.pattern(this.pattern));\n            if (this.format == \"email\")\n                validators.push(Validators.email);\n        }\n\n        if (this.type == 'number') {\n            if (this.minimum !== null)\n                validators.push(Validators.min(this.minimum));\n            if (this.maximum !== null)\n                validators.push(Validators.max(this.maximum));\n        }\n\n        console.info(name, validators);\n\n        return validators;\n    }\n}  ","import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\n\nimport { FormostAbstractControl } from './formost-abstract-control.interface';\nimport { FormGroup } from './controls/form-group';\nimport { FormArray } from './controls/form-array';\nimport { FormControl } from './controls/form-control';\nimport { FormostJsonSchema7 } from './formost-json-schema-7.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchemaConverterService {\n\n  constructor() { }\n\n  getFormostForm(schema: FormostJsonSchema7 | string): FormGroup {\n    let formItems: FormostAbstractControl = this.getFormItems(schema, \"#\");\n\n    if (formItems instanceof FormGroup)\n      return formItems;\n    else {\n      return new FormGroup({ formost: formItems });\n    }\n  }\n\n  getFormostForm$(schema: FormostJsonSchema7 | string): Observable<FormGroup> {\n    return of(this.getFormostForm(schema));\n  }\n\n  getFormostAbstractControl(schema: FormostJsonSchema7 | string, refId = \"#\"): FormostAbstractControl {\n    let formItems: FormostAbstractControl = this.getFormItems(schema, refId);\n    return formItems;\n  }\n\n  getFormostAbstractControl$(schema: FormostJsonSchema7 | string, refId = \"#\"): Observable<FormostAbstractControl> {\n    return of(this.getFormostAbstractControl(schema, refId));\n  }\n\n  private getFormItems(schema: FormostJsonSchema7 | string, refId = \"#\"): FormostAbstractControl {\n    const schemaObj: FormostJsonSchema7 = typeof schema === 'string' ? JSON.parse(schema) : schema;\n\n    if (!schemaObj) { console.warn('NO-OBJECT', schemaObj); return {} as FormostAbstractControl; }\n    if (!schemaObj.type) { console.warn('NO-TYPE', schemaObj); return {} as FormostAbstractControl; }\n\n    let formItems: FormostAbstractControl;\n    switch (schemaObj.type) {\n      case 'null':\n        return null;\n      case 'object':\n        formItems = this.getFormGroup(schemaObj, refId); break;\n      case 'array':\n        formItems = this.getFormArray(schemaObj, refId); break;\n      default:\n        formItems = this.getFormControl(schemaObj, refId); break;\n    }\n\n    return formItems;\n  }\n\n  private getFormControl(obj: FormostJsonSchema7, refId: string): FormControl {\n    const formCtl = new FormControl(obj);\n    // formCtl.populate(obj);\n    if (refId) { formCtl.refid = refId; }\n    return formCtl;\n  }\n\n  private getFormGroup(obj: FormostJsonSchema7, refId: string): FormGroup {\n    const reqArr: Array<string> = obj.required || [];\n    const item = new FormGroup({});\n    item.populate(obj);\n    if (refId) { item.refid = refId; }\n    for (const prop in obj.properties) {\n      if (obj.properties.hasOwnProperty(prop)) {\n        const unknownField = obj.properties[prop] as any;\n        unknownField.name = prop;\n        if (reqArr.indexOf(prop) > -1) { unknownField.required = true; }\n\n        const knownField = this.getFormItems(unknownField, `${refId}/fields/${prop}`);\n        //item.fields.push(knownField);\n        item.addControl(prop, knownField);\n      }\n    }\n    return item;\n  }\n\n  private getFormArray(obj: FormostJsonSchema7, refId: string): FormArray {\n    const item = new FormArray([], undefined, undefined, this);\n    item.populate(obj);\n    if (refId) { item.refid = refId; }\n    const allowedTypesArray = Array.isArray(obj.items)\n      ? obj.items as FormostJsonSchema7[]\n      : [obj.items as FormostJsonSchema7];\n    // let i = 0;\n    // for (const allowedType of allowedTypesArray) {\n    //     // ++i;\n    //     // allowedType.name = allowedType.name || `${obj.name ? obj.name + '-' : null}type-${i}`;\n    //     // item.itemTypes.push(this.getFormItems(allowedType, `${refId}/itemTypes/${allowedType.name}`) as FormField);\n    //     item.itemTypes.push(this.getFormItems(allowedType, `${refId}/itemTypes/[${i++}]`) as FormControl);\n    // }\n    item.itemTypes = allowedTypesArray;\n    return item;\n  }\n\n}\n","import { JSONSchema7 } from 'json-schema';\n\nexport interface FormostJsonSchema7 extends JSONSchema7 {\n\n}\n\n/**\n\nvar x: JSONSchema7 = {\n    \"title\": \"People\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 3,\n            \"description\": \"Please enter your name\"\n        },\n        \"vegetarian\": {\n            \"type\": \"boolean\",\n            \"title\": \"Are you a vegetarian?\"\n        },\n        \"birthDate\": {\n            \"type\": \"string\",\n            \"format\": \"date\"\n        },\n        \"nationality\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"DE\",\n                \"IT\",\n                \"JP\",\n                \"US\",\n                \"RU\",\n                \"Other\"\n            ]\n        },\n        \"favorites\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            },\n            \"uniqueItems\": true,\n            \"default\": []\n        },\n        \"personalData\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"age\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Please enter your age.\"\n                },\n                \"height\": {\n                    \"type\": \"number\"\n                },\n                \"drivingSkill\": {\n                    \"type\": \"number\",\n                    \"maximum\": 10,\n                    \"minimum\": 1,\n                    \"default\": 7\n                }\n            },\n            \"required\": [\n                \"age\",\n                \"height\"\n            ]\n        },\n        \"occupation\": {\n            \"enum\": [\n                \"doctor\",\n                \"lawyer\"\n            ],\n            \"type\": \"string\"\n        },\n        \"postalCode\": {\n            \"type\": \"string\",\n            \"maxLength\": 5\n        }\n    },\n    \"required\": [\n        \"occupation\",\n        \"nationality\"\n    ]\n};\n\n\n// */\n","/*\n * Public API Surface of json-formost-core\n */\n\nexport * from './lib/util';\nexport * from './lib/formost-schema-converter.service';\nexport * from './lib/formost-json-schema-7.interface';\nexport * from './lib/formost-abstract-control.interface';\nexport * from './lib/controls/form-group';\nexport * from './lib/controls/form-array';\nexport * from './lib/controls/form-control';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["NgFormGroup","NgFormArray","NgFormControl"],"mappings":"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"}